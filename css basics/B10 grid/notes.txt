Alright, let's move on to another powerful CSS layout technique: **CSS Grid Layout**, often simply called **CSS Grid**.

CSS Grid is a two-dimensional layout system, which means it's designed for arranging items in both rows and columns simultaneously. This makes it ideal for creating complex and responsive page layouts.

**Key Concepts of CSS Grid:**

1.  **Grid Container:** The parent element that will contain the items to be laid out using CSS Grid. You turn an element into a grid container by setting its `display` property to `grid` or `inline-grid`.

2.  **Grid Items:** The direct children of a grid container. These items will be placed and sized within the grid.

3.  **Grid Lines:** The horizontal and vertical lines that define the structure of the grid. They are numbered starting from 1.

4.  **Grid Tracks:** The spaces between adjacent grid lines. A horizontal track is a row, and a vertical track is a column.

5.  **Grid Cells:** The smallest unit in the grid, formed by the intersection of a row track and a column track.

6.  **Grid Areas:** One or more grid cells that can be spanned by a grid item.

**Grid Container Properties:**

These are CSS properties that you apply to the *parent* element (the grid container) to define the grid structure and the behavior of its children (the grid items). Some important ones include:

* `display: grid;` or `display: inline-grid;`: Defines the element as a grid container. `grid` makes it a block-level container, while `inline-grid` makes it an inline-level container.
* `grid-template-rows`: Defines the number and height of the rows in the grid. You can specify values in various units (e.g., pixels, percentages, `fr` units for fractional space).
* `grid-template-columns`: Defines the number and width of the columns in the grid, using similar unit values as `grid-template-rows`.
* `grid-template-areas`: Defines named grid areas that you can then use to place grid items.
* `grid-row-gap`: Specifies the size of the gap between rows.
* `grid-column-gap`: Specifies the size of the gap between columns.
* `grid-gap`: A shorthand property for setting both `grid-row-gap` and `grid-column-gap`.
* `justify-items`: Defines the default `justify-self` for all grid items along the inline (row) axis. Values include `stretch` (default), `start`, `end`, `center`.
* `align-items`: Defines the default `align-self` for all grid items along the block (column) axis. Values include `stretch` (default), `start`, `end`, `center`.
* `justify-content`: Defines how the grid is positioned within the grid container along the inline (row) axis if the total size of the grid is less than the size of the container. Values include `start` (default), `end`, `center`, `space-between`, `space-around`, `space-evenly`.
* `align-content`: Defines how the grid is positioned within the grid container along the block (column) axis if the total size of the grid is less than the size of the container. Values include `start` (default), `end`, `center`, `space-between`, `space-around`, `space-evenly`.

**Grid Item Properties:**

These are CSS properties that you apply to the *children* elements (the grid items) to control their placement and sizing within the grid. Some important ones include:

* `grid-row-start`, `grid-row-end`, `grid-column-start`, `grid-column-end`: Specify the grid lines where the item starts and ends in terms of rows and columns.
* `grid-row`: A shorthand property for `grid-row-start` and `grid-row-end`.
* `grid-column`: A shorthand property for `grid-column-start` and `grid-column-end`.
* `grid-area`: Can be used as a shorthand for `grid-row-start`, `grid-column-start`, `grid-row-end`, and `grid-column-end`, or to place an item in a named grid area defined by `grid-template-areas`.
* `justify-self`: Aligns a single grid item along the inline (row) axis, overriding the `justify-items` value. Values are `stretch` (default), `start`, `end`, `center`.
* `align-self`: Aligns a single grid item along the block (column) axis, overriding the `align-items` value. Values are `stretch` (default), `start`, `end`, `center`.

**Example:**

Let's create a basic two-column layout using CSS Grid.

**Step 1: Update your `index.html` to include a simple structure**

Open your `index.html` file and modify the `<body>` content to something like this:

```html
<body>
    <div class="grid-container">
        <div class="grid-item header">Header</div>
        <div class="grid-item sidebar">Sidebar</div>
        <div class="grid-item content">Content</div>
        <div class="grid-item footer">Footer</div>
    </div>
</body>
```

**Step 2: Add Grid CSS rules to `styles.css`**

Open your `styles.css` file and add the following rules (you can remove or comment out the Flexbox-related CSS if you like):

```css
body {
    background-color: lightgray;
}

.grid-container {
    display: grid; /* Make it a grid container */
    grid-template-columns: 200px auto; /* Two columns: 200px wide and the rest */
    grid-template-rows: 50px auto 30px; /* Three rows: 50px, automatic height, 30px */
    grid-gap: 10px; /* Gap between grid items */
}

.grid-item {
    background-color: lightcoral;
    color: white;
    padding: 20px;
    text-align: center;
}

.header {
    grid-column: 1 / 3; /* Header spans both columns */
}

.sidebar {
    /* Sidebar will automatically go in the first column of the second row */
}

.content {
    /* Content will automatically go in the second column of the second row */
}

.footer {
    grid-column: 1 / 3; /* Footer spans both columns */
}
```

**Step 3: Save and refresh**

1.  Save your `styles.css` file.
2.  Save your `index.html` file.
3.  Refresh your `index.html` page in the browser.

You should now see a basic layout with:

* A header spanning the top.
* A sidebar on the left.
* Content on the right.
* A footer spanning the bottom.

**Explanation:**

* `.grid-container { display: grid; ... }`: This makes the `div` with the class `grid-container` a CSS Grid container.
* `grid-template-columns: 200px auto;`: This defines two columns. The first column is 200 pixels wide, and the second column takes up the remaining available space (`auto`).
* `grid-template-rows: 50px auto 30px;`: This defines three rows. The first row is 50 pixels high, the second row's height is determined by its content (`auto`), and the third row is 30 pixels high.
* `grid-gap: 10px;`: This creates a 10-pixel gap between all rows and columns.
* `.header { grid-column: 1 / 3; }`: This tells the element with the class `header` to start at grid column line 1 and end at grid column line 3, effectively spanning both columns.
* `.footer { grid-column: 1 / 3; }`: Similarly, the footer spans both columns.
* The `sidebar` and `content` items are placed automatically into the remaining grid cells. Since the `sidebar` comes first in the HTML, it occupies the first column of the second row, and `content` occupies the second column of the second row.

This is a very basic introduction to CSS Grid. It has many more powerful features for creating complex layouts, including named grid areas, fractional units (`fr`), and more.

Would you like to explore more advanced Grid features or perhaps try a more complex layout example?